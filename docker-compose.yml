services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181


  kafka:
    image: confluentinc/cp-kafka:6.2.10
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  kafka-topics-generator:
    image: confluentinc/cp-kafka:6.2.10
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic finish-registration --replication-factor 1 --partitions 2
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic create-documents --replication-factor 1 --partitions 2
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic send-documents --replication-factor 1 --partitions 2
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic send-ses --replication-factor 1 --partitions 2
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic credit-issued --replication-factor 1 --partitions 2
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic statement-denied --replication-factor 1 --partitions 2
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
      
  calculator:
    build:
      context: ./calculator
      args:
        JAR_FILE: target/*.jar
    container_name: calculator
    ports:
      - "8080:8080"
    restart: unless-stopped

  db:
    image: postgres:17
    container_name: deal-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - deal-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d postgres" ]
      interval: 5s
      timeout: 3s
      retries: 10

  deal:
    build:
      context: ./deal
      args:
        JAR_FILE: target/*.jar
    container_name: deal
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_APPLICATION_JSON: '{
              "app.calculator.base-url":"http://calculator:8080"
            }'
    ports:
      - "8081:8081"
    restart: unless-stopped

  statement:
    build:
      context: ./statement
      args:
        JAR_FILE: target/*.jar
    container_name: statement
    depends_on:
      deal:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_JSON: '{
          "app.deal.base-url":"http://deal:8081",
          "spring.kafka.bootstrap-servers":"kafka:9092"
        }'
    restart: unless-stopped

  dossier:
    build:
      context: ./dossier
      args:
        JAR_FILE: target/*.jar
    container_name: dossier
    depends_on:
      deal:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_APPLICATION_JSON: '{
        "app.deal.base-url":"http://deal:8081",
        "spring.kafka.bootstrap-servers":"kafka:9092"
      }'
    restart: unless-stopped

volumes:
  deal-db-data: